<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>게시판 리스트</title>
</head>
<body>
<h1>공지사항</h1>
    <table border="1" cellpadding="1" cellspacing="1">
        <ul>
            <tr>
                <td>번호</td>
                <td>제목</td>
                <td>작성자</td>
                <td>날짜</td>
                <td>조회수</td>
            </tr>
            {{#selectListNotice}}
                <tr>
                    <td>{{notice_id}}</td>
                    <td><a href="/cs/selectnotice/{{notice_id}}">{{notice_title}}</a></td>
                    <td>{{notice_writer}}</td>
                    <td>{{notice_date}}</td>
                    <td>{{notice_cnt}}</td>
                </tr>
            {{/selectListNotice}}
        </ul>
    </table>
<a href="/cs/insertnotice-view" role="button">글 작성</a>
<a href="/cs/notice">목록</a>
</body>
</html>




공지사항 전체보기 
========================================
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
<form method="get" action="/cs/updatenoticeview/">
<input name="notice_id" type="hidden" value="{{selectNotice.notice_id}}"/>
<table border="1" cellpadding="1" cellspacing="1">
    <tr>
        <td>제목</td>
        <td><input name="notice_title" type="text" value="{{selectNotice.notice_title}}" readonly><td>
    </tr>
    <tr>
        <td colspan="2"><textarea name="notice_content" cols="50" rows="20" readonly>{{selectNotice.notice_content}}</textarea></td>
    </tr>
</table>
    <input type="submit" value="수정"/>
</form>
<a href="/cs/notice">목록</a>
<a href="/cs/{{selectNotice.notice_id}}/updatenoticeview">수정</a>
<a href="/cs/{{selectNotice.notice_id}}/deletenotice">삭제</a>
</body>
</html>


상세보기


====================

<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
<form action="/cs/insertnotice" method="get">
<table border="1" cellpadding="1" cellspacing="1">
    <tr>
        <td>제목</td>
        <td><input name="notice_title" type="text"><td>
    </tr>
    <tr>
        <td colspan="2"><textarea name="notice_content" cols="50" rows="20"></textarea></td>
    </tr>
</table>
    <input type="submit" value="등록">
</form>
 <a href="/cs/notice">취소</a>

</body>
</html>

수정뷰
===========

<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
<form method="get" action="/cs/{{updateNotice.notice_id}}/updatenotice">
    <input name="notice_id" type="hidden" value="{{updateNotice.notice_id}}"/>
<table border="1" cellpadding="1" cellspacing="1">
    <tr>
        <td>제목</td>
        <td><input name="notice_title" type="text" value="{{updateNotice.notice_title}}"><td>
    </tr>
    <tr>
        <td colspan="2">
            <textarea name="notice_content" cols="50" rows="20">{{updateNotice.notice_content}}</textarea>
        </td>
    </tr>
</table>
    <input type="submit" value="수정"/>
</form>
<a href="/cs/notice">목록</a>
</body>
</html>



업데이트뷰 





























package com.example.yoonlove.controller;

import com.example.yoonlove.dto.VideoDto;
import com.example.yoonlove.service.VideoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

@Controller
public class VideoController {

    @Autowired
    private VideoService videoService;

    @GetMapping("contentList") //컨텐츠 전체목록보기 뷰
    public ModelAndView selectListContent() {
        List<VideoDto> contentList = videoService.selectListContent();
        ModelAndView mv = new ModelAndView();
        mv.setViewName("/video/contentList");
        mv.setStatus(HttpStatus.valueOf(200));
        mv.addObject("video", contentList);
        return mv;
    }

    @GetMapping("content/{video_id}") //해당 컨텐츠 뷰
    public ModelAndView selectContent(@RequestParam VideoDto dto) {
        VideoDto contentDetail = videoService.selectContent(dto);

        ModelAndView mv = new ModelAndView();
        mv.setViewName("/video/contentDetail");
        mv.setStatus(HttpStatus.valueOf(200));
        mv.addObject("content", contentDetail);
        return mv;
    }


    /* 127.0.0.1:8080/bbs/1?abc=123
     * ?전: URL / ?후: 파라미터
     * URL에 있는 1을 꺼낼 때 end-point에 {}를 사용. 즉,{bbsNo} -> 1
     *
     * */


    @GetMapping("contentInsertView")  //컨텐츠 추가하는 뷰
    public ModelAndView selectVideoInsertView() {
        ModelAndView mv = new ModelAndView();
        mv.setViewName("/video/contentInsertView");
        mv.setStatus(HttpStatus.valueOf(200));
        return mv;
    }

    @ResponseBody
    @PostMapping("contentInsert")  //컨텐츠 추가 처리
    public boolean insertContent(@RequestBody VideoDto dto) {
        boolean result = videoService.insertContent(dto);
        return result;
    }

    @GetMapping("{video_id}/UpdateView") //컨텐츠 업데이트하는 뷰
    public ModelAndView selectBbsUpdateView(@RequestBody VideoDto dto) {
        VideoDto videodto = videoService.selectContent(dto);//업데이트를 하려면 해당 컨텐츠 불러와야하니까 위에 selectContent메소드를 다시씀!
        ModelAndView mv = new ModelAndView();
        mv.setViewName("/video/contentUpdateView");
        mv.setStatus(HttpStatus.valueOf(200));
        mv.addObject("content", videodto);
        return mv;
    }

    @ResponseBody
    @PutMapping("{video_id}/update") //업데이트 처리
    public boolean updateContent(@RequestBody VideoDto dto) {
        boolean result = videoService.updateContent(dto);
        return result;
    }

    @ResponseBody
    @DeleteMapping("{video_id}/delete") //삭제 처리
    public boolean deleteBbs(@RequestBody VideoDto dto) {
        boolean result = videoService.deleteContent(dto);
        return result;

    }
}




비디오 컨트롤러 
================


package com.example.yoonlove.service;


import com.example.yoonlove.dto.UserDto;
import com.example.yoonlove.dto.VideoDto;

import com.example.yoonlove.mapper.VideoMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Service
public class VideoService {

    @Autowired
    private VideoMapper videoMapper;


    public List<VideoDto> selectListContent() {
        List<VideoDto> videoList = videoMapper.selectListContent();// 오류원인:videoMapper 얘를 VideoMapper로 했었음..
        return videoList;
    }

    public VideoDto selectContent(VideoDto videodto) {
        VideoDto dto = videoMapper.selectContent(videodto);
        return dto;
    }

    public boolean insertContent(VideoDto dto) {


        int cnt = videoMapper.insertContent(dto);
        if(cnt > 0) {
            return true;
        }
        return false;


    }

    public boolean updateContent(VideoDto dto) {
        int cnt = videoMapper.updateContent(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }

    public boolean deleteContent(VideoDto dto) {
        int cnt = videoMapper.deleteContent(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }







}
비디오서비스
====================



package com.example.yoonlove.mapper;

import com.example.yoonlove.dto.VideoDto;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface VideoMapper {


    public List<VideoDto> selectListContent();


    public VideoDto selectContent(VideoDto dto);

    public int insertContent(VideoDto dto);

    public int updateContent(VideoDto dto);
    public int deleteContent(VideoDto dto);

}
비디오메퍼
===============


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.yoonlove.mapper.VideoMapper">


    <select id="selectListContent" resultType="com.example.yoonlove.dto.VideoDto">
        SELECT * FROM video
        <if test="keyword != null and keyword != ''">
            WHERE video_name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        ORDER BY video_id DESC
    </select>

    <select id="selectContent" parameterType="com.example.yoonlove.dto.VideoDto" resultType="com.example.yoonlove.dto.VideoDto">
        SELECT * FROM video WHERE video_id = #{video_id}
    </select>

    <!-- <update id="updateBbsView" parameterType="">
         UPDATE video SET views = views+1 WHERE video_id = #{video_id}
     </update>-->

    <insert id="insertContent" parameterType="com.example.yoonlove.dto.VideoDto" >
        INSERT INTO video  VALUES (#{video_name}, #{video_sub}, #{video_view},#{like_cnt},#{video_url},#{upload_date},#{video_profit},#{project_id})
    </insert>

    <update id="updateContent" parameterType="com.example.yoonlove.dto.VideoDto" >
        UPDATE
        video
        SET
        video_name = #{video_name}
        , video_sub = #{video_sub}
        , video_view = #{video_view}
        , like_cnt = #{like_cnt}
        , video_url = #{video_url}
        , upload_date = #{upload_date}
        , video_profit = #{video_profit}
        , project_id = #{project_id}

        WHERE
        video_id = #{video_id}
    </update>

    <delete id="deleteContent" parameterType="com.example.yoonlove.dto.VideoDto">
        DELETE FROM video WHERE video_id = #{video_id}
    </delete>


</mapper>

===========================================================


package com.example.yoonlove.dto;

import lombok.*;
@Getter
@Setter
@AllArgsConstructor
public class UserDto {

    private String user_id;
    private String pw;
    private String pw2;
    private String user_name;
    private String nickname;
    private String phone;
    private String tell;
    private String email;
    private String address1;
    private String address2;
    private String zipcode;
    private String company_user;
    private String grade;
    private String authority;
    private String company_id;
    private String dpt_id;
    private String sign_date;
    private String basic_pay;
    private String total_pay;
}

유저디티오
====================



package com.example.yoonlove.controller;

import com.example.yoonlove.dto.UserDto;
import com.example.yoonlove.service.UserService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class UserViewController {

    /**
     * 1. 회원가입
     *   1-1. 회원 가입 페이지
     *   1-2. 회원 가입 요청
     *     - ID, PW, 이름 기타등등
     *   1-3. 회원가입 성공 페이지
     *   1-4. 회원가입 실패 페이지(팝업....경고창)
     * 2. 로그인
     *   2-1 로그인 페이지
     *   2-2 로그인 요청
     *     - ID, PW
     *   2-3 로그인 성공시 페이지이동 (메인, 로그인페이지 이전화면)
     *   2-4 로그인 실패시 페이지 (팝업... 경고창 등등)
     */
  /*  //1. 페이지 이동
    @GetMapping(path="/login",produces = MediaType.TEXT_HTML_VALUE)
    public String login(){
        return "/login-page";
    }

    // 로그인 요청
    @PostMapping(path="/login",produces = MediaType.TEXT_HTML_VALUE,consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public ModelAndView loginPro(@ModelAttribute UserDto.UserLoginRequest dto){

        return new ModelAndView("/success");
    }*/

    //회원가입 페이지 이동

    //회원가입 요청

    @Autowired
    private UserService userService;
    @GetMapping("loginView") //로그인 화면
    public ModelAndView selectLoginView() {
        ModelAndView mv = new ModelAndView();
        mv.setViewName("loginView");
        mv.setStatus(HttpStatus.valueOf(200));
        return mv;
    }

    @ResponseBody
    @PostMapping("login") // 로그인 처리
    public boolean loginUser(@RequestBody UserDto dto, HttpServletRequest request) {
        UserDto user = userService.loginUser(dto);
        HttpSession session = request.getSession();
        session.setAttribute("user", user);

        boolean result = false;
        if(user != null) {
            result = true;
        }
        return result;
    }

    @ResponseBody
    @PostMapping("logout") //로그아웃처리
    public boolean loginoutUser(@RequestBody UserDto dto, HttpServletRequest request) {
        HttpSession session = request.getSession();
        session.invalidate();
        return true;
    }

    @GetMapping("joinView")//회원가입 뷰
    public ModelAndView selectJoinView(@RequestParam UserDto dto) {
        ModelAndView mv = new ModelAndView();
        mv.setViewName("joinView");
        mv.setStatus(HttpStatus.valueOf(200));
        return mv;
    }

    @ResponseBody
    @PostMapping("join") //회원가입 처리
    public boolean joinUser(@RequestBody UserDto dto) {
        boolean result = userService.joinUser(dto);
        return result;
    }




}

유저뷰컨트롤러
===================================


package com.example.yoonlove.service;


import com.example.yoonlove.dto.UserDto;
import com.example.yoonlove.mapper.UserMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Service
public class UserService {

    @Autowired
    private UserMapper userMapper;


    public UserDto loginUser(UserDto dto) {
        UserDto user = userMapper.selectUser(dto);
        return user;
    }


    public boolean joinUser(UserDto dto) {
        // 이 부분은 Map을 사용할 때와 동일하게 작동합니다.
        // userMapper.selectUser() 및 userMapper.insertUser() 메서드 호출 시 DTO 객체를 전달하면 됩니다.
        Map<String, Object> inParam = new HashMap<>();
        inParam.put("email", dto.getEmail());
        UserDto user = userMapper.selectUser((UserDto) inParam);
        if (user != null) {
            return false;
        }

        int cnt = userMapper.insertUser(dto);   //오류원인: 얘를 UserDto dto로 햇엇음..
        return cnt > 0;
    }

}

유저서비스

==================================

package com.example.yoonlove.mapper;

import com.example.yoonlove.dto.CreatorDto;
import com.example.yoonlove.dto.UserDto;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;
import java.util.Map;

@Mapper
public interface UserMapper {


    public UserDto selectUser(UserDto dto);


    public int insertUser(UserDto dto);

}

유저매퍼
=============================


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.yoonlove.mapper.UserMapper">


    <select id="selectUser" parameterType="com.example.yoonlove.dto.UserDto" resultType="com.example.yoonlove.dto.UserDto">
        SELECT
        *
        FROM
        users
        WHERE
        email = #{email}
        <if test="pw != null and pw != ''">
            AND pw = #{pw}
        </if>
    </select>


    <insert id="insertUser" parameterType="com.example.yoonlove.dto.UserDto">
        INSERT INTO users VALUES (#{pw}, #{pw2}, #{userName},#{nickname},#{phone},#{tell},#{email},#{address1},#{address2},#{zipcode},#{company_user},#{grade},#{authority},#{dpt_id},#{sign_date},#{basic_pay},#{total_pay})
    </insert>


</mapper>
유저매퍼xml
===========================




package com.example.yoonlove.controller;

import com.example.yoonlove.dto.LogDto;
import com.example.yoonlove.service.LogService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

@Controller
public class LogController {

    @Autowired
    private LogService logService;


    @GetMapping("logList")
    public ModelAndView selectListLog(){
        List<LogDto> dto = logService.selectListLog();
        ModelAndView mv = new ModelAndView();
        mv.setViewName("/log/logList");
        mv.addObject("selectListLog", dto);
        return mv;
    }






    @GetMapping("selectlog/{log_id}")
    public ModelAndView selectLog(LogDto logdto){
        LogDto dto = logService.selectLog(logdto);
        ModelAndView mv = new ModelAndView();
        mv.setViewName("logDetail");
        mv.addObject("selectLog", dto);
        return mv;
    }

    @GetMapping("insertLogView")
    public  ModelAndView insertLogView(){
        ModelAndView mv = new ModelAndView();
        mv.setViewName("logInsertView");
        mv.setStatus(HttpStatus.valueOf(200));
        return mv;
    }

    @PutMapping("insertLog")
    public boolean insertLog(@RequestBody LogDto dto) {
        boolean result = logService.insertLog(dto);
        return result;
    }



    @GetMapping("/{log_id}/logUpdateView")
    public ModelAndView selectBbsUpdateView(@RequestBody LogDto dto) {
        LogDto logdto = logService.selectLog(dto);//업데이트를 하려면 해당 컨텐츠 불러와야하니까 위에 selectContent메소드를 다시씀!
        ModelAndView mv = new ModelAndView();
        mv.setViewName("logUpdateView");
        mv.setStatus(HttpStatus.valueOf(200));
        mv.addObject("content", logdto);
        return mv;
    }

    @PutMapping ("{log_id}/updateLog")
    public boolean updateLog(@RequestBody LogDto dto){
     boolean result = logService.updateLog(dto);
      return result;
    }

    @DeleteMapping("{log_id}/deleteLog")
    public boolean deleteLog(@RequestBody LogDto dto) {
        boolean result = logService.deleteLog(dto);
        return result;

    }


}


(로그 컨트롤러)



package com.example.yoonlove.service;


import com.example.yoonlove.dto.LogDto;
import com.example.yoonlove.mapper.LogMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
public class LogService {

    @Autowired
    private LogMapper logMapper;


    public List<LogDto> selectListLog() {
        List<LogDto> logList = logMapper.selectListLog();
        return logList;
    }

    public LogDto selectLog(LogDto dto) {
        LogDto logdto = logMapper.selectLog(dto);
        return dto;
    }

   /* public LogDto selectLog(LogDto dto) {
        LogDto dto = logMapper.selectLog(dto);   //오류 원인: LogDto dto에서 dto 변수가 겹침
        return dto;
    }*/

    public boolean insertLog(LogDto dto) {


        int cnt = logMapper.insertLog(dto);
        if(cnt > 0) {
            return true;
        }
        return false;


    }

    public boolean updateLog(LogDto dto) {
        int cnt = logMapper.updateLog(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }

    public boolean deleteLog(LogDto dto) {
        int cnt = logMapper.deleteLog(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }







}


(로그서비스)


package com.example.yoonlove.mapper;

import com.example.yoonlove.dto.LogDto;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface LogMapper {


    public List<LogDto> selectListLog();


    public LogDto selectLog(LogDto dto);

    public int insertLog(LogDto dto);

    public int updateLog(LogDto dto);
    public int deleteLog(LogDto dto);

}


(로그맿퍼)



<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.yoonlove.mapper.LogMapper">


    <select id="selectListLog"  resultType="com.example.yoonlove.dto.LogDto">
        SELECT * FROM log
        <if test="keyword != null and keyword != ''">
            WHERE log_num LIKE CONCAT('%', #{keyword}, '%')
        </if>
        ORDER BY Log_id DESC
    </select>

    <select id="selectLog" parameterType="com.example.yoonlove.dto.LogDto" resultType="com.example.yoonlove.dto.LogDto">
        SELECT * FROM log WHERE log_id = #{log_id}
    </select>

    <!--<update id="updateBbsView" parameterType="">
        UPDATE log SET views = views+1 WHERE log_id = #{log_id}
    </update>-->

    <insert id="insertLog" parameterType="com.example.yoonlove.dto.LogDto">
        INSERT INTO log ( log_num, log_date, log_content, project_id,)  VALUES (#{log_num}, #{bbsContents}, #{userName})
    </insert>

    <update id="updateLog" parameterType="com.example.yoonlove.dto.LogDto">
        UPDATE
        log
        SET
        log_num = #{log_num}
        , log_date = #{log_date}
        , log_content = #{log_content}


        WHERE
        lod_id = #{log_id}
    </update>

    <delete id="deleteLog" parameterType="com.example.yoonlove.dto.LogDto">
        DELETE FROM log WHERE log_id = #{log_id}
    </delete>


</mapper>


(로그매퍼.xml)




package com.example.yoonlove.dto;

import java.util.Date;


public class PlanDto {

    private int day_id;
    private Date film_date;
    private String weather;
    private String light;
    private String costume;
    private String prop;
    private int film_order;
    private String direct;
    private int project_id;


}


(플랜디티오)



package com.example.yoonlove.controller;

import com.example.yoonlove.dto.LogDto;
import com.example.yoonlove.dto.PlanDto;
import com.example.yoonlove.service.PlanService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;



    @Controller
    public class PlanController {

        @Autowired
        private PlanService planService;


        @GetMapping("scheduleList")
        public ModelAndView selectListSchedule(){
            List<PlanDto> dto = planService.selectListSchedule();
            ModelAndView mv = new ModelAndView();
            mv.setViewName("/plan/ScheduleList");
            mv.addObject("ScheduleList", dto);
            return mv;
        }






        @GetMapping("selectlog/{log_id}")
        public ModelAndView insertScheduleView(LogDto logdto){

                ModelAndView mv = new ModelAndView();
                mv.setViewName("insertScheduleView");
                mv.setStatus(HttpStatus.valueOf(200));
                return mv;

        }

        @GetMapping("insertLogView")
        public  ModelAndView insertLogView(){
            ModelAndView mv = new ModelAndView();
            mv.setViewName("logInsertView");
            mv.setStatus(HttpStatus.valueOf(200));
            return mv;
        }

        @PutMapping("insertLog")
        public boolean insertLog(@RequestBody LogDto dto) {
            boolean result = logService.insertLog(dto);
            return result;
        }



        @GetMapping("/{log_id}/logUpdateView")
        public ModelAndView selectBbsUpdateView(@RequestBody LogDto dto) {
            LogDto logdto = logService.selectLog(dto);//업데이트를 하려면 해당 컨텐츠 불러와야하니까 위에 selectContent메소드를 다시씀!
            ModelAndView mv = new ModelAndView();
            mv.setViewName("logUpdateView");
            mv.setStatus(HttpStatus.valueOf(200));
            mv.addObject("content", logdto);
            return mv;
        }

        @PutMapping ("{log_id}/updateLog")
        public boolean updateLog(@RequestBody LogDto dto){
            boolean result = logService.updateLog(dto);
            return result;
        }

        @DeleteMapping("{log_id}/deleteLog")
        public boolean deleteLog(@RequestBody LogDto dto) {
            boolean result = logService.deleteLog(dto);
            return result;

        }
}


(플랜컨트롤러)


package com.example.yoonlove.service;


import com.example.yoonlove.dto.LogDto;
import com.example.yoonlove.dto.PlanDto;
import com.example.yoonlove.dto.VideoDto;
import com.example.yoonlove.mapper.LogMapper;
import com.example.yoonlove.mapper.PlanMapper;
import com.example.yoonlove.mapper.VideoMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
public class PlanService {

    @Autowired
    private PlanMapper planMapper;


    public List<PlanDto> selectListSchedule() {
        List<PlanDto> planList = planMapper.selectListSchedule();
        return planList;
    }



    public boolean insertSchedule(PlanDto dto) {


        int cnt = planMapper.insertSchedule(dto);
        if(cnt > 0) {
            return true;
        }
        return false;


    }

    public boolean insertTime(PlanDto dto) {


        int cnt = planMapper.insertTime(dto);
        if(cnt > 0) {
            return true;
        }
        return false;


    }

    public boolean insertActorManagement(PlanDto dto) {


        int cnt = planMapper.insertActorManagement(dto);
        if(cnt > 0) {
            return true;
        }
        return false;


    }


    public boolean insertFilm(PlanDto dto) {


        int cnt = planMapper.insertFilm(dto);
        if(cnt > 0) {
            return true;
        }
        return false;


    }






    public boolean updateSchedule(PlanDto dto) {
        int cnt = planMapper.updateSchedule(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }


    public boolean updateTime(PlanDto dto) {
        int cnt = planMapper.updateTime(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }


    public boolean updateActorManagement(PlanDto dto) {
        int cnt = planMapper.updateActorManagement(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }

    public boolean updateFilm(PlanDto dto) {
        int cnt = planMapper.updateFilm(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }




    public boolean deleteSchedule(PlanDto dto) {
        int cnt = planMapper.deleteSchedule(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }



    public boolean deleteActorManagement(PlanDto dto) {
        int cnt = planMapper.deleteActorManagement(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }


    public boolean deleteTime(PlanDto dto) {
        int cnt = planMapper.deleteTime(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }


    public boolean deleteFilm(PlanDto dto) {
        int cnt = planMapper.deleteFilm(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }




//==================================================================

    public List<PlanDto> selectListPlan(PlanDto dto) {
        List<PlanDto> planList = planMapper.selectListPlan(dto);
        return planList;
    }


    public boolean insertPlan(PlanDto dto) {


        int cnt = planMapper.insertPlan(dto);
        if(cnt > 0) {
            return true;
        }
        return false;


    }

    public boolean updatePlan(PlanDto dto) {
        int cnt = planMapper.updatePlan(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }

    public boolean deletePlan(PlanDto dto) {
        int cnt = planMapper.deletePlan(dto);
        if(cnt > 0) {
            return true;
        }
        return false;
    }

}


(플랜서비스)



package com.example.yoonlove.mapper;

import com.example.yoonlove.dto.PlanDto;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

@Mapper
public interface PlanMapper {




    public List<PlanDto> selectListSchedule();


    public int insertSchedule(PlanDto dto);
    public int insertTime(PlanDto dto);

    public int insertActorManagement(PlanDto dto);

    public int insertFilm(PlanDto dto);
    public int updateSchedule(PlanDto dto);
    public int updateTime(PlanDto dto);
    public int updateActorManagement(PlanDto dto);
    public int updateFilm(PlanDto dto);

    public int deleteSchedule(PlanDto dto);
    public int deleteActorManagement(PlanDto dto);
    public int deleteTime(PlanDto dto);
    public int deleteFilm(PlanDto dto);


 //=====================================================
    public List<PlanDto> selectListPlan();

    public int insertPlan(PlanDto dto);

    public int updatePlan(PlanDto dto);
    public int deletePlan(PlanDto dto);



}


(플랜매퍼)




<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.yoonlove.mapper.PlanMapper">


    <select id="selectListSchedule" parameterType="com.example.yoonlove.dto.PlanDto" resultType="com.example.yoonlove.dto.PlanDto">
        SELECT * FROM schedule_day
        <if test="keyword != null and keyword != ''">
            WHERE video_name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        ORDER BY video_id DESC
    </select>

    <select id="selectListPlan" parameterType="com.example.yoonlove.dto.PlanDto" resultType="com.example.yoonlove.dto.PlanDto">
        SELECT * FROM schedule_day WHERE video_id = #{video_id}
    </select>

    <!-- <update id="updateBbsView" parameterType="">
         UPDATE video SET views = views+1 WHERE video_id = #{video_id}
     </update>-->

    <insert id="insertSchedule" parameterType="com.example.yoonlove.dto.PlanDto" >
        INSERT INTO schedule_day (video_name, video_sub, video_view, like_cnt, video_url, upload_date,video_profit,project_id) VALUES (#{video_name}, #{video_sub}, #{video_view},#{like_cnt},#{video_url},#{upload_date},#{video_profit},#{project_id})
    </insert>

    <insert id="insertTime" parameterType="com.example.yoonlove.dto.PlanDto" >
        INSERT INTO schedule_day (video_name, video_sub, video_view, like_cnt, video_url, upload_date,video_profit,project_id) VALUES (#{video_name}, #{video_sub}, #{video_view},#{like_cnt},#{video_url},#{upload_date},#{video_profit},#{project_id})
    </insert>

    <insert id="insertActorManagement" parameterType="com.example.yoonlove.dto.PlanDto" >
        INSERT INTO schedule_day (video_name, video_sub, video_view, like_cnt, video_url, upload_date,video_profit,project_id) VALUES (#{video_name}, #{video_sub}, #{video_view},#{like_cnt},#{video_url},#{upload_date},#{video_profit},#{project_id})
    </insert>

    <insert id="insertFilm" parameterType="com.example.yoonlove.dto.PlanDto" >
        INSERT INTO schedule_day (video_name, video_sub, video_view, like_cnt, video_url, upload_date,video_profit,project_id) VALUES (#{video_name}, #{video_sub}, #{video_view},#{like_cnt},#{video_url},#{upload_date},#{video_profit},#{project_id})
    </insert>

    <insert id="insertPlan" parameterType="com.example.yoonlove.dto.PlanDto" >
        INSERT INTO video (video_name, video_sub, video_view, like_cnt, video_url, upload_date,video_profit,project_id) VALUES (#{video_name}, #{video_sub}, #{video_view},#{like_cnt},#{video_url},#{upload_date},#{video_profit},#{project_id})
    </insert>

    <update id="updateSchedule" parameterType="com.example.yoonlove.dto.PlanDto" >
        UPDATE
        bbs
        SET
        video_name = #{video_name}
        , video_sub = #{video_sub}


        WHERE
        video_id = #{video_id}
    </update>

    <update id="updateTime" parameterType="com.example.yoonlove.dto.PlanDto" >
        UPDATE
        bbs
        SET
        video_name = #{video_name}
        , video_sub = #{video_sub}


        WHERE
        video_id = #{video_id}
    </update>



    <update id="updateActorManagement" parameterType="com.example.yoonlove.dto.PlanDto" >
        UPDATE
        bbs
        SET
        video_name = #{video_name}
        , video_sub = #{video_sub}


        WHERE
        video_id = #{video_id}
    </update>


    <update id="updateFilm" parameterType="com.example.yoonlove.dto.PlanDto" >
        UPDATE
        bbs
        SET
        video_name = #{video_name}
        , video_sub = #{video_sub}


        WHERE
        video_id = #{video_id}
    </update>


    <update id="updatePlan" parameterType="com.example.yoonlove.dto.PlanDto" >
        UPDATE
        bbs
        SET
        video_name = #{video_name}
        , video_sub = #{video_sub}


        WHERE
        video_id = #{video_id}
    </update>










    <delete id="deleteSchedule" parameterType="com.example.yoonlove.dto.PlanDto">
        DELETE FROM video WHERE video_id = #{video_id}
    </delete>

    <delete id="deleteActorManagement" parameterType="com.example.yoonlove.dto.PlanDto">
        DELETE FROM video WHERE video_id = #{video_id}
    </delete>

    <delete id="deleteTime" parameterType="com.example.yoonlove.dto.PlanDto">
        DELETE FROM video WHERE video_id = #{video_id}
    </delete>

    <delete id="deleteFilm" parameterType="com.example.yoonlove.dto.PlanDto">
        DELETE FROM video WHERE video_id = #{video_id}
    </delete>

    <delete id="deletePlan" parameterType="com.example.yoonlove.dto.PlanDto">
        DELETE FROM video WHERE video_id = #{video_id}
    </delete>


</mapper>



(플랜xml)








